

// Copyright Shunsuke Sogame 2008-2009.
// Distributed under the terms of an MIT-style license.


package com.github.okomok.madatest; package autotest


import com.github.okomok.mada

import mada.auto._
import mada.Auto
import junit.framework.Assert._


class VarTest extends junit.framework.TestCase {

    class MyFile(val name: String) extends java.io.Closeable {
        var disposed = false
        override def close = {
            assertFalse("disposed twice: " + name, disposed)
            disposed = true
        }
    }

    def testUse: Unit = {
        val f1 = new MyFile("f1")
        val f2 = use(new MyFile("f2")) // hmm, no way to detect equality of temporaries(generated by implicit conversions) Auto.
        val f3 = new MyFile("f3")
        val f4 = new MyFile("f4")

        for {
            a1 <- useVar(f1)
            a2 <- useVar(f2)
            a3 <- useVar(f3)
        } {
            val _f1 = a1.release
            assertSame(f1, _f1.get)

            a2.reset(f2) // shall be no effects.
            a2.reset(f4)
        }

        assertFalse(f1.disposed)
        assertTrue(f2.get.disposed)
        assertTrue(f4.disposed)
        assertTrue(f3.disposed)
    }

    def testVar: Unit = {
        val f1 = new MyFile("f1")
        val f2 = new MyFile("f2")

        // a1 holds f1.
        val a1: Auto[MyFile] = use(f1)

        // a2 holds f2.
        val a2: Auto[MyFile] = use(f2)

        // av1 is empty for now.
        val av1: Var[MyFile] = new Var()
        assertSame(null, av1.underlying)

        // av2 owns a2.
        val av2: Var[MyFile] = new Var(a2)
        assertSame(a2, av2.underlying)
        assertSame(f2, av2.get)

        // av1 owns a1.
        av1.reset(a1)
        assertSame(a1, av1.underlying)
        assertSame(f1, av1.get)

        // av1 releases a1 to b1.
        val b1 = new Var(av1.release)
        assertSame(null, av1.underlying)
        assertSame(f1, b1.get)

        // a1 comes back from b1.
        av1.reset(b1.release)
        assertSame(f1, av1.get)

        // Now use!
        using(av1) { f =>
            assertSame(f1, f)
        }
        using(av2) { f =>
            assertSame(f2, f)
        }

        assertTrue(f1.disposed)
        assertTrue(f2.disposed)
    }
}
