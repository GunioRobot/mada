<?xml version="1.0" encoding="UTF-8"?>
<project name="mada" default="help">


<!-- config -->

    <property name="scala.home" location="../../scala-2.8.0.RC5" />
    <property name="junit.jar" location="${ant.home}/lib/junit-3.8.2.jar" />

    <property name="application.package" value="com.github.okomok.mada" />
    <property name="application.testpackage" value="${application.package}test" />


<!-- properties -->

    <property name="src.dir" location="src" />
    <property name="src.main.dir" location="${src.dir}/main" />
    <property name="src.test.dir" location="${src.dir}/test" />
    <property name="libs.dir" location="libs" />
    <property name="target.dir" location="target" />
    <property name="target.classes.dir" location="${target.dir}/classes" />
    <property name="target.test-classes.dir" location="${target.dir}/test-classes" />
    <property name="target.surefire-reports.dir" location="${target.dir}/surefire-reports" />
    <property name="target.site.dir" location="${target.dir}/site" />
    <property name="target.site.scaladocs.dir" location="${target.site.dir}/scaladocs" />


<!-- dirs -->

    <target name="dirs">
        <echo>Creating output directories if needed...</echo>
        <mkdir dir="${target.dir}" />
        <mkdir dir="${target.classes.dir}" />
        <mkdir dir="${target.test-classes.dir}" />
        <mkdir dir="${target.surefire-reports.dir}" />
        <mkdir dir="${target.site.scaladocs.dir}" />
    </target>


<!-- scalac -->

    <path id="scala.classpath">
        <pathelement path="${scala.home}/lib/scala-compiler.jar" />
        <pathelement path="${scala.home}/lib/scala-library.jar" />
    </path>

    <taskdef resource="scala/tools/ant/antlib.xml">
        <classpath refid="scala.classpath" />
    </taskdef>

    <macrodef name="scalajavac">
        <attribute name="classpathref" />
        <attribute name="src" />
        <attribute name="destdir" />
        <sequential>
            <scalac target="jvm-1.5" destdir="@{destdir}"
                deprecation="on" unchecked="on"
                force="true"
                addParams="-Yrecursion 50 -make:transitive -dependencyfile @{destdir}/#scala_dependencies#">
                <classpath refid="@{classpathref}" />
                <src path="@{src}" />
                <include name="**/*.scala" />
                <include name="**/*.java" />
            </scalac>
            <javac target="1.5" destdir="@{destdir}">
                <classpath refid="@{classpathref}" />
                <src path="@{src}" />
                <include name="**/*.java" />
            </javac>
        </sequential>
    </macrodef>


<!-- compilation -->

    <path id="compile.classpath">
        <path refid="scala.classpath" />
        <fileset dir="${libs.dir}">
            <include name="*.jar" />
        </fileset>
        <pathelement path="${target.classes.dir}" /> <!-- for transitive -->
    </path>

    <target name="compile" depends="dirs">
        <scalajavac classpathref="compile.classpath" src="${src.main.dir}" destdir="${target.classes.dir}" />
    </target>


<!-- unit test -->

    <path id="test.compile.classpath">
        <path refid="compile.classpath" />
        <pathelement path="${target.classes.dir}" />
        <pathelement path="${junit.jar}" />
        <pathelement path="${target.test-classes.dir}" /> <!-- for transitive -->
    </path>

    <target name="test-compile" depends="compile, dirs">
        <scalajavac classpathref="test.compile.classpath" src="${src.test.dir}" destdir="${target.test-classes.dir}" />
    </target>

    <path id="test.classpath">
        <path refid="test.compile.classpath" />
        <pathelement path="${target.test-classes.dir}" />
    </path>

    <target name="test" depends="test-compile">
        <junit fork="true" forkmode="perBatch"
            errorProperty="test.failed" failureProperty="test.failed">
            <classpath refid="test.classpath" />
            <formatter type="brief" usefile="false" />
            <formatter type="xml" unless="testcase" />
            <test name="${application.testpackage}.${testcase}" todir="${target.surefire-reports.dir}" if="testcase" />
            <batchtest todir="${target.surefire-reports.dir}" unless="testcase">
                <fileset dir="${target.test-classes.dir}">
                    <include name="**/*Test*.class" />
                    <exclude name="**/*$*.class" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="report" depends="test">
        <junitreport todir="${target.surefire-reports.dir}">
            <fileset dir="${target.surefire-reports.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${target.surefire-reports.dir}" />
        </junitreport>
    </target>


<!-- doc -->

    <target name="doc" depends="dirs">
        <scaladoc classpathref="compile.classpath" srcdir="${src.main.dir}" destdir="${target.site.scaladocs.dir}"
        doctitle="${ant.project.name}" />
    </target>


<!-- deploy -->

    <target name="jar" depends="test">
        <fail message="Unit Tests failed" if="test.failed" />
        <jar destfile="${target.dir}/${ant.project.name}.jar" basedir="${target.classes.dir}" />
    </target>


<!-- convenience -->

    <target name="help">
        <echo>Mada Build. Available targets:</echo>
        <echo>   jar:       Builds jar.</echo>
        <echo>   doc:       Builds scaladoc.</echo>
        <echo>   report:    Builds html report from unit tests result.</echo>
        <echo>   test:      Runs all the unit tests. For one test, add "-Dtestcase=ATestCase".</echo>
        <echo>   clean:     Cleans up the target directory.</echo>
    </target>

    <target name="clean">
        <delete dir="${target.dir}" />
    </target>


</project>
